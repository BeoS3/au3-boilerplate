namespace JSONT
{
  class DataProxy // data proxy is used as a representation of current data node in rules
  {
    property undefined( name, v ) // 'undefined' property handler, just return the name of the property as it is
      { get return name; }
  }
  
  function transform(data, frules, stream = null)
  {
    function params2array( params.. ) { return params; }  // simply returns paramters as an array, passed to frules generator of rules
    var proxy = new DataProxy();                          // data proxy object, represents current data node in rules.
    var rules = frules(params2array,proxy);               // generate rules
    
    var apply; // forward declaration of the function below
    var out = stream || Stream.openString();              // creating output stream as a StringBuilder or using existing
    
    function processData(data,path)                       // takes current data node and its path and applies rules to its sub-elements.
    {
      if( typeof data == #array )
      {
        path += "[]"; // for each element in the array apply the rule to it:
        if( var r = rules[path] ) { for( var ael in data ) apply(ael,r,path); return; }
      }
      out << data.toHtmlString();                         // terminal data, just output it.
    }
    
    apply = function(data,rule,path)                      // applies the rule to the data node (path - path of the data node) 
    {
      for( var rel in rule )
      {
        if( typeof rel == #string ) out << rel;           // string - output it
        else if( rel === proxy ) processData(data,path);  // the proxy - process data node that it represents
        else if(typeof rel == #symbol)                    // symbol marks property invocation, produced by <DataProxy.property undefined()>
        {
          var member = data[rel];
          if( member !== undefined )
          {
            var p = path + "." + rel; var r = rules[p];
            if( r ) apply( member, r, p );                // if member rule found, apply it to the member data
            else out << member.toHtmlString();            // otherwise output it.
          }
        }
      }
    }
    // and finally apply root rule to the root data node
    apply(data,rules[""] || [proxy],"");
    
    if( stream ) return stream;  // if stream was provided - return it.
    var rv = out.toString();     // otherwise return string from string builder (our in-memory stream).
    out.close();
    return rv;
  }  
}