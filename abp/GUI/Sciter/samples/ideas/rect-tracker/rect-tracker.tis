  // rect tracker implementation. 
  
  class RectTracker: Behavior
  {
    function attached()
    {
      this.cover = self.$(":root>#cover-box");
      if(!this.cover)
      {
        self.insert{div, id:"cover-box" };      
        this.cover = self.$(":root>#cover-box");
      }
    }
    function onMouse(evt)
    {
      switch(evt.type) 
      {
        case Event.MOUSE_DOWN:
          this.mouseDown = true;
          this.anchorX = evt.xView;
          this.anchorY = evt.yView;
          this.clearSelection();
          view.focus = this;
          break;
        case Event.MOUSE_MOVE | Event.SINKING:
          if(this.mouseDown)
          {
            this.capture(true);
            this.cover.move(this.anchorX, this.anchorY,
                            evt.xView - this.anchorX,
                            evt.yView - this.anchorY, #view);
                            
            this.onCoverChanged();
            return true;
          }
          break;
        case Event.MOUSE_UP:
          this.capture(false);
          this.mouseDown = false;
          this.cover.style.clear();
          break;
      }
      return false;
    }
    
    function onCoverChanged()
    {
      var (x1,y1,x2,y2) = this.cover.box(#rect, #border, #view);
      
      function max(a,b) { return a > b? a : b; }
      function min(a,b) { return a < b? a : b; }
            
      for( var child in this )
      {
        var (cx1,cy1,cx2,cy2) = child.box(#rect, #border, #view);
        child.@#selected = ( max(x1,cx1) < min(x2,cx2) && max(y1,cy1) < min(y2,cy2) )? true : undefined;
      }
    }
    
    function clearSelection()
    {
      for( var el in this.$$([selected]) )
        el.@#selected = undefined;
    }
    
    function onFocus(evt) {} // indication that it is focusable.
    
    function onKey(evt)
    {
      if( evt.type == Event.KEY_DOWN &&
          evt.ctrlKey &&
          evt.keyCode == 'C' )
          return this.selection2clipboard();
    }
    function selection2clipboard()
    {
      var str = "";
      for(var el in this.$$([selected]))
         str += el.text + "\r\n"; 
      view.clipboard(#put, str );
      return true;
    }
    
  }

