;#AutoIt3Wrapper_UseX64=n ; if you are on x64 and want x86

#include "VirtualFlex.Memory.au3"
#include "AutoItObject.au3"
#include <Array.au3> ; for displaying array

; Error monitoring
Global $oError = ObjEvent("AutoIt.Error", "_ErrFunc")
Func _ErrFunc()
	ConsoleWrite("! COM Error !  Number: 0x" & Hex($oError.number, 8) & "   ScriptLine: " & $oError.scriptline & " - " & $oError.windescription & @CRLF)
	Return
EndFunc   ;==>_ErrFunc

$dll=@AutoItExe&":test.dll"
ConsoleWrite('@@ Debug(' & @ScriptLineNumber & ') : $dll = ' & $dll & @CRLF & '>Error code: ' & @error & @CRLF) ;### Debug Console
$fo=FileOpen($dll,2+8+16)
FileWrite($fo, _Autoitobjectdll())
FileClose($fo)

ConsoleWrite(FileRead($dll,100)&@CRLF)

#include <Array.au3>
#include <File.au3>

$aFiles=_FileListToArray(@ScriptDir,"*.dll")
_ArrayDisplay($aFiles)

; Start AutoItObject
;~ _AutoItObject_Startup()
ConsoleWrite('@@ Debug(' & @ScriptLineNumber & ') : _AutoItObject_Startup() = ' & _AutoItObject_Startup($dll) & @CRLF & '>Error code: ' & @error & @CRLF) ;### Debug Console


; SYSTEM (kernel) is:
ConsoleWrite("!SYSTEM = " & _SystemModuleInformation() & @CRLF)

; See all modules
Global $aArrayOfSystemModuled = _SystemModuleInformation(False)

_ArrayDisplay($aArrayOfSystemModuled, "SystemModuleInformation")




; FUNCTION:

Func _SystemModuleInformation($fGetSYSTEM = True)
	; First call is to NtQuerySystemInformation is to determine required size of the buffer (SYSTEM_INFORMATION_CLASS parameter is set to SystemModuleInformation)
	Local $aCall = DllCall("ntdll.dll", "long", "NtQuerySystemInformation", _
			"dword", 11, _ ; SystemModuleInformation
			"ptr", 0, _
			"dword", 0, _
			"dword*", 0)
	; Check for possible error (on AutoIt side only)
	If @error Then Return SetError(1, 0, "")
	Local $iSize = $aCall[4]
	; Make raw buffer to collect to
	Local $oBufferRaw = _AutoItObject_DllStructCreate("byte[" & $iSize & "]")
	; Fill the buffer
	$aCall = DllCall("ntdll.dll", "long", "NtQuerySystemInformation", _
			"dword", 11, _ ; SystemModuleInformation
			"ptr", $oBufferRaw(), _
			"dword", $iSize, _
			"dword*", 0)
	If @error Then Return SetError(2, 0, "")
	; Address of SYSTEM_MODULE_INFORMATION structure
	Local $pPointer = $oBufferRaw()
	; Some definitions
	#cs
		SYSTEM_MODULE_INFORMATION structure is defined as:

		typedef struct _SYSTEM_MODULE_INFORMATION {
		DWORD_PTR            ModulesCount;
		SYSTEM_MODULE        Modules[0]; // array of SYSTEM_MODULE structures
		} SYSTEM_MODULE_INFORMATION, *PSYSTEM_MODULE_INFORMATION;

		And SYSTEM_MODULE structure is (free interptetation):

		typedef struct _SYSTEM_MODULE {
		DWORD_PTR            Reserved[2];
		PVOID                ImageBaseAddress;
		DWORD                ImageSize;
		DWORD                Flags;
		WORD                 Index;
		WORD                 Unknown;  // seems to be set for modules accesible from user mode
		WORD                 LoadCount;
		WORD                 ModuleNameOffset;
		BYTE                 ImageName[MAXIMUM_FILENAME_LENGTH];
		} SYSTEM_MODULE, *PSYSTEM_MODULE;
	#ce
	; I can write now:
	Local $oCount = _AutoItObject_DllStructCreate("dword_ptr ModulesCount", $pPointer)
	; ...and move pointer to first SYSTEM_MODULE structure
	$pPointer += $oCount.__size__
	; Collect data (overall number of system modules):
	Local $iCount = $oCount.ModulesCount
	; Dimensioning array to fill
	Local $aArray[$iCount + 1][7] = [["Index", "ImageName", "ImageBaseAddress", "ImageSize (bytes)", "LoadCount", "Location", "Flags"]]
	; Needed variables
	Local $oSYSTEM_MODULE, $iIndex, $iNameOffset, $ImageName
	; Loop through all SYSTEM_MODULE structures and fill the array
	For $i = 1 To $iCount
		$oSYSTEM_MODULE = _AutoItObject_DllStructCreate("dword_ptr Reserved[2];" & _
				"ptr ImageBaseAddress;" & _
				"dword ImageSize;" & _
				"dword Flags;" & _
				"word Index;" & _
				"word Unknown;" & _
				"word LoadCount;" & _
				"word ModuleNameOffset;" & _
				"char ImageName[256]", _
				$pPointer)
		$iIndex = $oSYSTEM_MODULE.Index
		$aArray[$i][0] = $iIndex
		$iNameOffset = $oSYSTEM_MODULE.ModuleNameOffset
		$ImageName = $oSYSTEM_MODULE.ImageName
		$aArray[$i][5] = StringLeft($ImageName, $iNameOffset)
		$ImageName = StringTrimLeft($ImageName, $iNameOffset)
		; If kernel name is wanted, return it
		If $iIndex = 0 And $fGetSYSTEM Then Return $ImageName
		$aArray[$i][1] = $ImageName
		$aArray[$i][2] = Ptr($oSYSTEM_MODULE.ImageBaseAddress)
		$aArray[$i][3] = $oSYSTEM_MODULE.ImageSize
		$aArray[$i][4] = $oSYSTEM_MODULE.LoadCount
		$aArray[$i][6] = "0x" & Hex($oSYSTEM_MODULE.Flags, 8) ; in this form just for better 'visualisation'
		; Move pointer to next structure
		$pPointer += $oSYSTEM_MODULE.__size__
	Next
	; If array is wanted return it
	Return $aArray
EndFunc   ;==>_SystemModuleInformation

Func _Autoitobjectdll ( )
    Local $sFileBin = "27kATVqQAAMAAACCBAAw//8AALgAOC0BAEAEOBkA4AAMDh8Aug4AtAnNIbgAAUzNIVRoaXMAIHByb2dyYW0AIGNhbm5vdCAAYmUgcnVuIGkAbiBET1MgbW+AZGUuDQ0KJASGAMz/yECInqYTQQUD5+gJE4oAB4EQ5iUTjAIHNROBEQIbpxPMAh8NE49RAgc9E4kCBzwEBzthAgdSaWNoAUcFo1AARQAATAEFAOYISu1NB7cCIQsBUAoAADoADBiDCZctAXgQARgCBxCCBQIAMAAFAAECCIUDAJDzBJYCD0AFAhqBFYYDAwMgcFoAAFGAH2BWCAAAZAEKcAAAeEMBtA0AgAAAwIATIHBRAAAcoLkGAIBTIIMESREALnRleHSBA145BEiBdYRbBQAgAE8uAHJkYXRhAABCag3EPg7AAD7LCYBGQCYugwnCfABgw0YATIHOCcAucnNyY8ACF8I6wDzCHE7QE3JlbLpvAApcwQnAQMIJUs4JfkKpRD8APwA/AD8AKQBVAIvs/3UIagj/ABVYUAAQUP8VUlTAAF3DxAIAxgJQAcUCg+wgg+Tw2QDA2VQkGN98JEAQ32wkEItgAYsARCQQhcB0PN4A6YXSeR7ZHCQgiwwkgfGBO4HBgP///3+D0ADABMAUg9IA6yykA+MCQtjjAtoA6xQBAfcCwqECdbjZXCQYAWEAycNWi/GDJgAAg2YYAI1GCEVAEYBAEYvGXuECi0IGQA4HUOhNYAZZgIPGCFb/FYSgAwBew4sBw41BCBDDi0EYYRaLRQgAiUEYXcIEAIs0QRwGAhwBAoABVlcAi/mNdwhmgz6IAHQHJAhqCFjgH0BmiQb/FYjAAYkwRxBfXsQF4AKDweAIUf8VvEEiRAhHEYzC/kARYAT/FQTgAwAzyWoCQFr34gAPkMH32QvIUWTojMQDiQYgGQBuEGPFCkASo9RggSyACY0ARhhQxwY8UQBCEMMRi0YIi0AfUUAIg2YIAF7EMFYAi3UMVzPJM8AQZolN9GAA5GoEAFmNffAz0olFEPDHRfaAcQCJRQD6ZsdF/gBG8wCnx0XgBAQCACjHReYDA+oAA+4AGEZ0G6AIAgfgM9IA86d0DItNEIkAAbgCQACA6xAHYBLCAWIPBDPAX14YycIMYyBhA41IGIBR/3AI/3AMAUUBgReLTRSJATPJAIXAD5TBi8FdJMIQJBtqAGYFFGoCAWMF99gbwEBdRMIITwQQagJKBAQ4ALgB4BFDBaAeCP8gTgSLRgRgEM7oQs/gKVboTf2gKjNGwGgpgUZmBACDKIkBxCcEi0UMiUYMDItFIAIAGBSJRhRnIS1GSgcWo9hCMeMNDKJXACS/IFbAOcBAJFIYIya/EAUCB8UldUAIiwZW/1DADBB0iTDBJV3DJcAOgEMDoIMgADPAJB5TQUZIRhhXg0aN/KNCi1I9gUb/185GVQAEiw4d4UWCR4EW04tGHFWjB0+jBwzwBh1EA4l0RhwiBiAjBsQCMQ3rIvujAYlGIBADX16GWzEMwAr/NujnoAEAM8BZiQaJRgQDIBVyKP9JBItBBACLVQg70HMIi4AJiwSBiQSRYRgCU2A18TP/xwYsAFIAEDl+EHYeAouQFxy4hdt0DhCLy+g/EAhT6JUBwQZHO34QcuKNlF4MYAGTgDyLPSEvAI1GKFD/141GukhSADhQAOAS0wtfUQOF1g9R0gB2IIX20DvE6EPiCzPoO3EA0AsJ0j5VGBAYg+wYUwCLyoPhAVZXDwSFwoBJ9sICD4VCuYIADA+EIwBtPQJ8UAl1bYt1HIOEfgjAASgHAACAJgAz24M4/Q+UwwAzwIXbD5XAiwD4iwbB5wQDxwAPtwiD+RV0GQCD+RR0FIP5GgB0G4P5E3QWg0D5A3QR6ZKABWpQE2oAUOAlrOElNgHiA5TAweAEA8aAUP90PgjpjDACDD16MQcACgiDeAgAAA+EtAYAAIMAwDiLTRz/MVAQ6209eeABD4WFi6B+JgKRIgJI69vzCkMQKvEKAQ+FeIABixoGZAkeYQmwCRp0IANhCbAJA3QWuAUAsAKA6VVwAroJBnE3hHUgM00zwOk0AAJ0PXvBBV1ALcAFUAcbCTABjUVgJHYw/xXCqHAChcB1OWAKoFLkaBAwHmaJgD3BUjABBIlBgEMcaglYZoSJQYA2HIlwGJMxBcIDpEACg8YoVusWjMMPADkIIA9Q6Xmp0B89eCEBEsYOpCCWgIPAWOvhPXeBAUAui30Ig3+BAYsxgAGLdSAHW9FadyQhBFtGCOk00ASD+Kj8dUwiDBggA1ghAwh9IFckAw1YaijAZokH6Pj4sCLAJAAT/3Ygi8j/doAc/3YYVui0ECRA6wIzwIlHxEPpAuOwRjPbO8MPjAIPsgcIi34QRzsIxw+N0KEAi34MAIs8h4l9CGY7sMsPhUfQJPIlPoIABfAl3ACOi8/oe/kE//+gBgk5XggPFITIMwFWMAFID4RCXzAeSA+Fs0EBddIcIF+D+AAEgTAiMAISLjACuQwQm4lFHMBmOQgPhRnQAlEb1BWg0RT40B8HMSLQKhLJ0CpqAxBYM8BbRIXJACuJTSA2K2YgOxh0C1NrKTlFgiB2KY1ENwhQEBslogWcAALpLRAMagPSW2APhaWzCKLwErQIGiCyCI3Bw7cIAnV/I3UIcWD5i8eBXIPgCgIhBgYeCAaDwBALbwnQMv+wCwPAi0QsxggQbfQAQAMB998AG/+D5/6DxwIBUA2JRfQD/o1FxPBXgAsg6UJhH+IwUimQC/82AAtGAAvpCiUwYv+AYM/o3/cxRUaJRiR5RnAPi1gACINl7ACNQwIAiUXojUXoUGpAAWoM/xWYEUlNQAxRUIlF+NYvU0CF235Gi8NQDccERfTgEACJXfyLkF30iUXhRgPDdWUBQAUAi00YjUQIDvAACoMBcTaDbRgQAIPDEP9N/HXPDP91YAVxMYteYIugRfjHRmCxvelhJK0ACzUACwAieQMikkMB7jFAAbEWoyR9QQFUI6APkoaTGvj2kA74uLEaQGY5Bw+FEkEjdzNJI2HNiwbwHW8Zg8BACIM4/3UjRzZmXIkeQZYQfDEElKFqBqzpzXAysENQMgGQMAFpwR4lCXFG7cAFQiyaLeMIaeAISiyCjSN0i1gGiz3hBxQJBxMJ1xtGIgYBNqAOYCGLdhgAiXX0g/7/dScHdwohkZEKg33wAlbzQSMULelHoAqwCrAiFQGGSQABABR0CrgOEQsCOxALOV0gD4T3gvqQE00I6Lb1oCO2YiAO4Au/sAC2OwyhFH3iJJBgAe8k7yTvJOEk/LvvJOck+O8k7yTtJPjhJMNgBeYk/INmYCADYIMCMKIgagNmiUYoBFhWUABYgrsA6NX0////cAgA/xXYYAAQg30AIACJXmCJRRwAdA2NRkhQ/3UAIP8VvFAAEI0gRihQ/9cCSNf/AE4Ii0Uc99gbAMAl/f/9fwUDQAACgOsFuAEMXwBeW8nCJABViwDsVleL8TP/OQB+EHYgi0YM/4B1CIsMuOhmANYAUOjzJgAAWVkAhcB0D0c7fhAAcuCDyP9fXl2AwgQAi8fr9gA6RFNWAS7x6LYAmItA2IP7/34jAEJXAIs8mIX/dA6LCM/oAwBGV+hZ8wD//1lTjU4M6Gh19/8AQVsBQgN5+aCLTQjo+QAfUAAtAm8BRvCD/v90MwUBFuIAFmaDOH50ACWLRwxTixywRIXbACrL6K6AC1Mc6AQBKgAMgBSJDLAIW+sLAEWNTwzoEHANAAADUlMz24BWi/FXiz2AAIsAxwYsUgAQiV4ABIleCIleDIkKXoAFFIGViV4YiQBeHIleIIleJEWBmziGno1GWIACahAg6ILyADU7w3QgC4vI6BkAO4v4oOsCM/9TgFhKgAYUagIABFIABGhYURQAEIAFloAFV4vOBOgaAGdfi8ZeWxLDgHVRUUNHi30IAIld/DlfEHZ9qUAm6PFDJgxAJn9AKQCJRQjrA4ldCAHCRfyL"
    $sFileBin &= "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"
    $sFileBin &= "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"
    $sFileBin &= "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"
    $sFileBin &= "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"
    $sFileBin = Binary ( _Base64Decode ( $sFileBin ) )
    $sFileBin = Binary ( _LzntDecompress ( $sFileBin ) )
    Return SetError ( 0, 0, $sFileBin )
EndFunc ;==> _Autoitobjectdll ()

Func _Base64Decode2 ( $input_string ) ; by trancexx
     Local $struct = DllStructCreate ( 'int' )
     Local $a_Call = DllCall ( 'Crypt32.dll', 'int', 'CryptStringToBinary', 'str', $input_string, 'int', 0, 'int', 1, 'ptr', 0, 'ptr', DllStructGetPtr ( $struct, 1 ), 'ptr', 0, 'ptr', 0 )
     If @error Or Not $a_Call[0] Then Return SetError ( 1, 0, '' )
     Local $a = DllStructCreate ( 'byte[' & DllStructGetData ( $struct, 1) & ']' )
     $a_Call = DllCall ( 'Crypt32.dll', 'int', 'CryptStringToBinary', 'str', $input_string, 'int', 0, 'int', 1, 'ptr', DllStructGetPtr ( $a ), 'ptr', DllStructGetPtr ( $struct, 1 ), 'ptr', 0, 'ptr', 0 )
     If @error Or Not $a_Call[0] Then Return SetError ( 2, 0, '' )
     Return DllStructGetData ( $a, 1 )
EndFunc ;==> _Base64Decode ()

Func _LzntDecompress ( $bBinary ); by trancexx
    $bBinary = Binary ( $bBinary )
    Local $tInput = DllStructCreate ( 'byte[' & BinaryLen ( $bBinary ) & ']' )
    DllStructSetData ( $tInput, 1, $bBinary )
    Local $tBuffer = DllStructCreate ( 'byte[' & 16 * DllStructGetSize ( $tInput ) & ']' )
    Local $a_Call = DllCall ( 'ntdll.dll', 'int', 'RtlDecompressBuffer', 'ushort', 2, 'ptr', DllStructGetPtr ( $tBuffer ), 'dword', DllStructGetSize ( $tBuffer ), 'ptr', DllStructGetPtr ( $tInput ), 'dword', DllStructGetSize ( $tInput ), 'dword*', 0 )
    If @error Or $a_Call[0] Then Return SetError ( 1, 0, '' )
    Local $tOutput = DllStructCreate ( 'byte[' & $a_Call[6] & ']', DllStructGetPtr ( $tBuffer ) )
    Return SetError ( 0, 0, DllStructGetData ( $tOutput, 1 ) )
EndFunc ;==> _LzntDecompress ()
