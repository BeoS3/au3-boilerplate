
class TapeV: Behavior
{
  const BUFFER_SIZE = 20;     // this is a max number of items in buffer
                              // this number has to be at least twice bigger than number of visible items.
  const BUFFER_CHUNK_SIZE = 5;// this is a number of items that will be fetched from items source on scroll to fill the buffer.
  const SCROLL_DELTA = 30;    // px, for mouse wheel
  
  const SCROLL_KINETIC_DELTA = 120;   // px, for mouse wheel
  const SCROLL_KINETIC_DECEL = 0.94;   // deceleartion 
  const SCROLL_KINETIC_STEP_DELAY = 4; // milliseconds, tied with deceleartion

  function attached()
  {
    // item template
    this.template = this.$( div.item.template );
    this.template.detach();
    this.dataSource = eval( this.@#items-source );
    this.fillList();
    if(this.@#kinetic !== undefined)
    {
      this.scrollDown = this.scrollDownKinetic;
      this.scrollUp = this.scrollUpKinetic;
    }
    else
    {
      this.scrollDown = this.scrollDownNormal;
      this.scrollUp = this.scrollUpNormal;
    }
  }

  // overridable event handlers:  
  function onBufferChanged(firstIdx, lastIdx) {}
  function onStartReached() {}
  function onEndReached() {}
  
  function merge(div,data)
  {
    for (var field in div.$$([merge-code])) // for all DOM elements with merge-code attribute
      field.html = data[ symbol(field.@#merge-code) ]; // get value of data.<field name> in put it in field.html
  }
    
  // initial list setup:
  function fillList()
  {
    var tmpl = this.template;
    var idx = 0;
    for( var item in this.dataSource.range(0,BUFFER_SIZE) )
    {
      var div = tmpl.clone(); // new instance of item from template
      this.insert(div);
      // merge item fields into div content:
      this.merge(div,item);
      div.idx = idx++;
    }  
  }
  
  function onMouse(evt)
  {
    if( evt.type == Event.MOUSE_WHEEL )
    {
      if(evt.wheelDelta < 0) this.scrollDown(); else this.scrollUp();
      return true;
    }
  }
  
  function scrollDownNormal(scrollDelta = SCROLL_DELTA) { return this.scrollStepDown(scrollDelta); }
  function scrollUpNormal(scrollDelta = SCROLL_DELTA)   { return this.scrollStepUp(scrollDelta); }
  
  function scrollDownKinetic(scrollDelta = SCROLL_KINETIC_DELTA)
  {
    var curr_time = Date.ticks();
    var prev_time = this.lastTime || curr_time;
    var velocity_delta = Float.max(2.0,scrollDelta.toFloat() / ((curr_time - prev_time) || 16));
    //stdout.$n(velocity_delta:{velocity_delta} time_delta:{curr_time - prev_time});
    this.lastTime = curr_time;    
    this.velocity = (this.velocity || 0.0) + velocity_delta;
    this.doScrollAnumation();
  }
  function scrollUpKinetic(scrollDelta = SCROLL_KINETIC_DELTA)
  {
    var curr_time = Date.ticks();
    var prev_time = this.lastTime || curr_time;
    var velocity_delta = Float.max(2.0,scrollDelta.toFloat() / ((curr_time - prev_time) || 16));
    this.lastTime = curr_time;    
    this.velocity = (this.velocity || 0.0) - velocity_delta;
    this.doScrollAnumation();
  }
  
  function doScrollAnumation()
  {
    if( this.state.animating ) return;
    function animationStep()
    {
      this.velocity *= SCROLL_KINETIC_DECEL;
      if( Math.abs(this.velocity) < 0.5 ) return 0;
      var v = this.velocity.toInteger();
      if( v < 0 ) this.scrollStepUp(-v); else this.scrollStepDown(v);
      return SCROLL_KINETIC_STEP_DELAY;
    }
    this.animate(animationStep);
  }
  
  function scrollStepDown(scrollDelta)
  {
    var (scroll_left,scroll_top, scroll_right, scroll_bottom) = this.scroll(#rect);
    var content_height = this.box(#height,#content);
        
    function fetchMore(tape)
    {
      var tmpl = tape.template;
      var idx = tape.last.idx + 1; var last_idx = idx;
      for( var item in tape.dataSource.range(idx,BUFFER_CHUNK_SIZE) )
      {
        var div = tmpl.clone(); // make new instance of item from the template
        tape.insert(div);
        tape.merge(div,item); // merge item fields into the div content
        div.idx = idx++; 
      } 
      if(idx == last_idx) return; // nothing was inserted - no more records.
      content_height = tape.box(#height,#content);
      // drop first items that exceed BUFFER_SIZE
      while( tape.length > BUFFER_SIZE ) 
        tape[0].remove();
        
      var content_height_after = tape.box(#height,#content); // adjust scroll position as
      scroll_top += content_height_after - content_height;   // we've removed first items.
      tape.onBufferChanged(tape.first.idx,tape.last.idx);
    }
    
    if( scroll_bottom + scrollDelta > content_height)
      // we need to pump more items in this virtual list:
      fetchMore(this); 
    this.scrollTo( scroll_left, scroll_top + scrollDelta );
  }
    
  function scrollStepUp(scrollDelta)
  {
    var (scroll_left,scroll_top, scroll_right, scroll_bottom) = this.scroll(#rect);
   
    function fetchMore(tape)
    {
      var tmpl = tape.template;
      var first = tape.first;
      var idx = first.idx - 1; var first_idx = idx;
      var prev_top = first.box(#top,#inner,#parent);
      for( var item in tape.dataSource.range(idx,-BUFFER_CHUNK_SIZE) )
      {
        var div = tmpl.clone(); // make new instance of item from template
        tape.insert(div,0);
        tape.merge(div,item); // merge item fields into the div content
        div.idx = idx--;
      } 
      if( idx == first_idx ) return; // nothing to do
      // drop last items that exceed BUFFER_SIZE
      while( tape.length > BUFFER_SIZE ) 
        tape.last.remove();
      scroll_top = first.box(#top,#inner,#parent) - prev_top; // adjust scroll position.
      tape.onBufferChanged(tape.first.idx,tape.last.idx);
    }
  
    if( (scroll_top - scrollDelta) < 0 )
      // we need to pump more items in this virtual list:
      fetchMore(this); 
    this.scrollTo( scroll_left, scroll_top - scrollDelta );
  }
  
  
}
