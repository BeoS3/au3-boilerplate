
class Picture : Behavior
{
  function onClick()
  {
    PictureLightbox.show(this);
  }
}

class PictureLightbox : Behavior
{

  const STEPS = 16;
  const DELAY = 5 /*ms*/;
  const FINAL_OPACITY = 0.85 /* final background opacity */;

  const layout = "<div#lightbox>"
                   "<div.frame>"
                     "<picture src='%s' />"
                     "<text.title>%s</text>"
                     "<widget.close>Close</widget>"
                   "</div>"
                  "</div>";
                 
  function show( forImg )
  {
    self.insert( String.printf(layout,forImg.@#src,forImg.@#tooltip) );
    self.$("div#lightbox").startShow(forImg);
  }
  
  function startShow(forImg)
  {
    var opacity = 0.0;
    var me = this;
    var picFrame = this.$("div.frame");
    var pic = this.$("picture");
    
    var currentWidth = forImg.box(#width);  var currentHeight = forImg.box(#height);
    
    var rootWidth = self.box(#width);
    var rootHeight = self.box(#height);
    
    var currentX = forImg.box(#left,#inner,#root);
    var currentY = forImg.box(#top,#inner,#root);
    
    currentX = (currentX * 100) / (rootWidth - currentWidth); // we will use currentX/Y as a weight 
    currentY = (currentY * 100) / (rootHeight - currentHeight); 
    
    var deltaCurrentX = (50.0 - currentX)/ STEPS;
    var deltaCurrentY = (50.0 - currentY)/ STEPS;
        
    var finalWidth = Integer.min( rootWidth,forImg.style.foregroundImageWidth);
    var finalHeight = Integer.min( rootHeight,forImg.style.foregroundImageHeight);
    
    var deltaW = 1.0 * (finalWidth - currentWidth) / STEPS;
    var deltaH = 1.0 * (finalHeight - currentHeight) / STEPS;
    
    var deltaOpacity = FINAL_OPACITY / STEPS; 
       
    pic.style#width = currentWidth;
    pic.style#height = currentHeight;
    
    //stdout.printf("final %d,%d current %d,%d/%d,%d \n", finalWidth, finalHeight,currentWidth, currentHeight, deltaCurrentX, deltaCurrentY );
    this.forImg = forImg;
    forImg.style#visibility = "hidden";

    function frameAnimator()
    {
      this.style#visibility = "visible";
      if( currentWidth < finalWidth || currentHeight < finalHeight )
      {
        opacity += deltaOpacity;
        me.style#background-color = color(128,128,128,opacity);
      
        currentWidth += deltaW;
        currentHeight += deltaH;
        pic.style#width = px(currentWidth);        
        pic.style#height = px(currentHeight);

        currentY += deltaCurrentY;
        currentX += deltaCurrentX;
        this.style#margin-left    = flex(currentX); // "XX%%";
        this.style#margin-right   = flex(100 - currentX);
        this.style#margin-top     = flex(currentY);
        this.style#margin-bottom  = flex(100 - currentY);
        return DELAY;
      }
    }
    picFrame.animate(frameAnimator);
  }
  
  function onControlEvent(evt)
  {
    if( evt.type == Event.BUTTON_CLICK)
    {
      this.close();
      return true;
    }
  }
 
  function close()
  {
    this.forImg.style#visibility = "visible";
    var picFrame = this.$("div.frame");
    picFrame.style#visibility = "hidden";
    
    var opacity = FINAL_OPACITY;
    var deltaOpacity = FINAL_OPACITY / STEPS; 
    
    function backAnimator()
    {
      if( opacity > 0.0 )
      {
        this.style#background-color = color(128,128,128,opacity);
        opacity -= deltaOpacity;
        return DELAY;
      }
      else
      {
        this.detach(); // done with it, remove.
        gc();          // call the GC to forget about it at all.
      }
    } 
    this.animate(backAnimator);   
  }
}