<html>
  <head>
    <style>
      body { height:100%%; }
      #sandbox 
      { 
        height:70%%; 
        border:1px dotted silver; 
        margin:4px;
        overflow:auto;
        prototype:Canvas;
      }
      #output 
      { 
        height:30%%; 
        border:1px dotted silver;
        margin:4px;
        overflow:auto;
      }
    </style>
    <script type="text/tiscript">
    
    var sandbox = self.select("#sandbox");
    var output = self.select("#output");
    
    if( !sandbox || !output ) throw "select is not working or bad DOM";
    
    // Event handler of onControlEvent
    self.onControlEvent = function(evt)
    {
      if(evt.type == Event.BUTTON_CLICK)
      {
         var name = evt.target.attributes["name"];
         try {
           var handler = eval( String.printf("on_%s_click", name));
           if( handler instanceof Function )
            // we've got function onNameClick defined, let's call it.
             return handler(evt.target);
         } 
         catch( er ) {
           output.html = String.printf("<pre>%s</pre>", er.toString());   
           output.update(true);
         }
      }
      return false;
    }
    
    // button click handlers:
    function on_Draw1_click(el)
    {
      sandbox.drawHandler = sandbox.draw1;
      sandbox.draw();
    }
    function on_Draw2_click(el)
    {
      sandbox.drawHandler = sandbox.draw2;
      sandbox.draw();
    }
    function on_Draw3_click(el)
    {
      sandbox.drawHandler = sandbox.draw3;
      sandbox.draw();
    }
    function on_Draw4_click(el)
    {
      sandbox.drawHandler = sandbox.draw4;
      sandbox.draw();
    }

    
    // Here is our Canvas drawing behavior. 
    // To attach it to the particular element (id="sandbox") I am using CSS:
    // #sandbox 
    // {  ... 
    //    prototype:Canvas;
    // }
    type Canvas : Behavior
    {
    
      function onSize() 
      {
        this.draw();
      }
    
      function draw() 
      {
        // call function (reference) stored in this.drawHandler in context of this -
        // delegate style method invocation
        this.drawHandler.call(this);
        this.refresh();
      }
  
      function draw0() 
      {
         var gfx = sandbox.graphics(0xFFFFFFFF);
        
         var width = sandbox.box(#width);
         var height = sandbox.box(#height);
         
         gfx.lineWidth(3);
         gfx.lineLinearGradient(0,height/2,width, height/2, Graphics.RGBA(0xFF,0xFF,0), Graphics.RGBA(0xFF,0,0xFF) );
         
         gfx.fillRadialGradient(width/2, height/2, width/2, Graphics.RGBA(0xFF,0xFF,0), Graphics.RGBA(0xFF,0,0) );
         // rounded rect with 20px radii
         gfx.rectangle(1.5, 1.5, width-3.0, height-3.0, 20);
      }
  
      function attached() 
      {
        // setup default drawing handler method;
        this.drawHandler = this.draw0;
      }
  
      function draw1() 
      {
        var gfx = sandbox.graphics(0xFFFFFFFF);
        
        var width = sandbox.box(#width);
        var height = sandbox.box(#height);
        
        gfx.lineWidth(2);
        gfx.lineColor( Graphics.RGBA(0x7F,0,0) );
        gfx.fillColor( Graphics.RGBA(0xFF,0xFF,0xDF) );
        gfx.rectangle(10.5, 10.5, width-21, height-21, 20.0);
        
        gfx.noLine();
        gfx.fillColor( color(0,0,0) );
        gfx.textAlignment(Graphics.ALIGN_CENTER,Graphics.ALIGN_CENTER);
        gfx.font("Verdana", 11.0);
        gfx.text(width/2, height/2, "Text in Sciter!");
      }
      
      function draw2() 
      {
        var gfx = sandbox.graphics(0xFFFFFFFF);
          
        var width = sandbox.box(#width);
        var height = sandbox.box(#height);
           
        gfx.lineWidth(10);
        gfx.lineJoin = Graphics.JOIN_ROUND;
        //gfx.lineCap = Graphics.CAP_ROUND;
        gfx.lineColor(Graphics.RGBA(0x7F,0,0));
        gfx.fillRadialGradient(width/2, height/2, height/2, Graphics.RGBA(0xFF,0xFF,0), Graphics.RGBA(0xFF,0,0) );
        var r = height/2 - 10;
        gfx.star(width/2, height/2, r/2,r, -Math.PI/2, 5 );
      }
  
      function draw3() 
      {
        var gfx = sandbox.graphics(0xFFFFFFFF);
          
        var width = sandbox.box(#width);
        var height = sandbox.box(#height);
           
        gfx.lineWidth(9);
        gfx.lineJoin = Graphics.JOIN_ROUND;
        //gfx.lineCap = Graphics.CAP_ROUND;
        gfx.lineColor(Graphics.RGBA(0x7F,0,0));
        gfx.fillRadialGradient(width/2, height/2, height/2, Graphics.RGBA(0xFF,0xFF,0), Graphics.RGBA(0xFF,0,0) );
        var points = [4, 4, width/2, height-4, width-4, 4];
        gfx.polygon(points);
        var points1 = [4, height-4, width/2, 4, width-4, height-4,4, height-4];
        gfx.polyline(points1);
      }
  
      function draw4() 
      {
        var gfx = sandbox.graphics(0xFFFFFFFF);
          
        var width = sandbox.box(#width);
        var height = sandbox.box(#height);
           
        gfx.lineWidth(1);
        gfx.lineJoin = Graphics.JOIN_ROUND;
        gfx.lineColor(Graphics.RGBA(0x7F,0,0));
        gfx.fillRadialGradient(width/2, height/2, height/2, Graphics.RGBA(0xFF,0xFF,0), Graphics.RGBA(0xFF,0,0) );
        gfx.textAlignment(Graphics.ALIGN_CENTER,Graphics.ALIGN_CENTER);
        gfx.font("Verdana", 64.0);
        gfx.text(width/2, height/2, "Text in Sciter!");
      }
    
    }
      
    </script>
  </head>
  <body>
    <h4>Graphics functions</h4>
    <button name="Draw1">Draw1</button>
    <button name="Draw2">Draw2</button>
    <button name="Draw3">Draw3</button>
    <button name="Draw4">Text test</button><br>
    sandbox:
    <div id="sandbox"></div>
    output:
    <div id="output"></div>
  </body>
</html>
  