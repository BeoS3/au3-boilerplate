

class Wizard : Behavior
{
  function attached() { this.post(::this.stepNo = 1); } // post() here is used to postpone initialization after children 

  // reports total number of steps:  
  property steps(v) 
  {
    get { return this.$(:root > div.panels).length; }
  }
  
  // reports current stepNo, sets new current step panel. 
  // stepNo is in [1..steps] range
  property stepNo(v)
  {
    get { return this.$(:root > div.panels > div:current).index + 1; }
    set 
    { 
      var steps = this.steps;
      v = v.limit(1, steps);
      var np = this.$(:root > div.panels > div:nth-child({ v })); 
      np.state.current = true;
      var pbtn = this.$(:root > div.buttons button[role="back"]); 
      var nbtn = this.$(:root > div.buttons button[role="next"]); 
      pbtn.state.disabled = v == 1;
      nbtn.state.disabled = v == steps;
      this.onStepChanged();
    }
  }
  
  function onControlEvent(evt) 
  {
    if( evt.type == Event.BUTTON_CLICK && evt.target.$is(div.buttons button[role]))
      switch( evt.target.@["role"] )
      {
        case "back": if(this.canGoBack()) this.stepNo -= 1; return true;
        case "next": if(this.canGoNext()) this.stepNo += 1; return true;
      }
  }
  // overridables:
  function canGoBack() { return true; }
  function canGoNext() { return true; }
  function onStepChanged() 
  { 
    var stepNo = this.$(:root > div.buttons span.step-no); 
    var totalSteps = this.$(:root > div.buttons span.steps); 
    stepNo.text = this.stepNo;
    totalSteps.text = this.steps;
    return true; 
  }
  
}