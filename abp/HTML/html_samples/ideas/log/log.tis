
namespace Log
{
  var channel = {};

  // log channel generator:
  function @channel(f,name, stream = stdout)
  {
    var channelSym = name;
    var is_enabled = true;
    function _printf(format, params..) 
    { 
      if(is_enabled) 
      { 
        var tr = __TRACE__[1]; // get previous stack trace record
        stream.print( name + ":" + String.printf.apply(null,format,params)); 
        stream.printf( " at %s %s(%d)\n", tr[1], tr[2], tr[0] ); 
        if(f) f(); 
      } 
    }
    function _print$(params..)
    { 
      if(is_enabled) 
      { 
        var tr = __TRACE__[1]; // get previous stack trace record
        stream.print( name + ":" + params.join("")); 
        stream.printf( " at %s %s(%d)\n", tr[1], tr[2], tr[0] ); 
        if(f) f(); 
      } 
    }
    
    this[ channelSym ] = _printf; // adding Log.name() function
    this[ symbol("$" + name ) ] = _print$; // adding Log.$name() function
    
    var channelCtl = 
    { 
      enabled: property(v) { get return is_enabled; set is_enabled = v; }, 
      output:  property(v) { get return stream; set stream = v; } 
    };
    this.channel[ channelSym ] = channelCtl; // adding ctl with .enabled and .output properties.
  }
  
  // declaring default log channels
  
  @channel #dbg;   // Log.dbg(format,..), Log.$dbg( .. ), Log.channel.dbg.enabled, Log.channel.dbg.ouput 
  @channel #warn;  // Log.warn(format,..), Log.$warn( .. ), Log.channel.warn.enabled, Log.channel.warn.ouput 
  @channel #info;  // Log.info(format,..), Log.$info( .. ), Log.channel.info.enabled, Log.channel.info.ouput 
  @channel #farewell stderr :{ throw "Get out of here!"; };  // Log.farewell(format,..), Log.$farewell( .. ), Log.channel.farewell.enabled, Log.channel.farewell.ouput 

}