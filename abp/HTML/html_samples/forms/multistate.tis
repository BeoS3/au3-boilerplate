class MultiState: Behavior
{
  function attached()
  {
    var initial = this.first; this.select(:el:initial=el,"option[selected]");
    this.state.focusable = true;
    this.setCurrent(initial);
  }
  function setCurrent(opt)
  { 
    if( !opt || opt === this.currentOpt) return; 
    if(this.currentOpt) this.currentOpt.state.current = false;
    this.currentOpt = opt; 
    this.@#state = opt.index.toString();
    opt.state.current = true; 
  }
  function getOptionOf(val)
  {
    for(var opt in this )
      if( opt.@#value == val ) 
        return opt;
    return this.first;
  }
  function setNextValue()
  {
    var n = this.currentOpt? (this.currentOpt.next || this.first) : this.first;
    this.setCurrent(n);
  }
  
  function onFocus(evt) {} 
  function onMouse(evt) 
  { 
    if( evt.type == Event.MOUSE_DOWN ||
        evt.type == Event.MOUSE_DCLICK ) 
       { this.setNextValue() ; return true; } 
   } 
  function onKey(evt)   
  { 
    if( evt.type == Event.KEY_DOWN && 
        evt.keyCode == ' ') 
       {  this.setNextValue() ; return true; } 
  }

  property value(v) 
  {
    function crackValue(v)
    {
      try { return parseData(v); } catch(e) {}
      return v;
    }
    set this.setCurrent(this.getOptionOf(v));
    get return this.currentOpt? crackValue(this.currentOpt.@#value): undefined;
  }
}